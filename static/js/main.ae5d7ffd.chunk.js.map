{"version":3,"sources":["ReactForm.js","App.js","serviceWorker.js","index.js"],"names":["ReactForm","handleChange","e","target","value","name","setState","handleSubmit","preventDefault","state","userName","password","passwordTwo","email","errorMessage","errorMessageTwo","errors","length","Popup","create","title","content","buttons","right","text","action","popup","close","className","onSubmit","this","type","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae5d7ffd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Popup from 'react-popup';\r\nimport './ReactForm.css';\r\nimport './Popup.css';\r\n\r\nexport default class ReactForm extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      userName: '',\r\n      password: '',\r\n      passwordTwo: '',\r\n      email: '',\r\n      errorMessage: '',\r\n      errorMessageTwo: '',\r\n      errors: {\r\n        userName: false,\r\n        password: false,\r\n        passwordTwo: false,\r\n        email: false\r\n      }\r\n    };\r\n  }\r\n\r\n  handleChange = e => {\r\n    const { target: { value, name } } = e;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const {\r\n      userName,\r\n      password,\r\n      passwordTwo,\r\n      email\r\n    } = this.state;\r\n    // this.setState({\r\n    //   errors: {\r\n    //     userName: userName === '',\r\n    //     email: email === ''\r\n    //   }\r\n    // });\r\n    if (passwordTwo !== password) {\r\n      this.setState({\r\n        errorMessage: 'Password must be at least 8 characters long',\r\n        errorMessageTwo: 'Password must match',\r\n        errors: {\r\n          userName: userName === '',\r\n          password: password === '',\r\n          passwordTwo: passwordTwo === '',\r\n          email: email === ''\r\n        }\r\n      });\r\n    } else if (password.length < 8 && password.length > 0) {\r\n      this.setState({\r\n        errorMessage: 'Password must be at least 8 characters long',\r\n        errorMessageTwo: 'Password must match',\r\n        errors: {\r\n          userName: userName === '',\r\n          password: password === '',\r\n          passwordTwo: passwordTwo === '',\r\n          email: email === '',\r\n        }\r\n      });\r\n    } else {\r\n      this.setState({\r\n        errorMessage: 'Password must be at least 8 characters long',\r\n        errorMessageTwo: 'Password must match',\r\n        errors: {\r\n          userName: userName === '',\r\n          password: password === '',\r\n          passwordTwo: passwordTwo === '',\r\n          email: email === ''\r\n        }\r\n      });\r\n    }\r\n    if (userName !== '' && password.length >= 8 && passwordTwo !== '' && email !== '' && passwordTwo === password) {\r\n      Popup.create({\r\n        title: 'Sign up complete!',\r\n        content: (\r\n          <div>\r\n            <p><strong>Welcome {userName}!</strong></p>\r\n            {null && <p><strong>Phone:</strong> {null}</p>}\r\n          </div>\r\n        ),\r\n        buttons: {\r\n          right: [{\r\n            text: 'Close',\r\n            action: popup => popup.close()\r\n          }],\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ReactForm\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div>\r\n            <p><strong>Username:</strong></p>\r\n              <input\r\n                name=\"userName\"\r\n                type=\"text\"\r\n                value={this.state.userName}\r\n                onChange={this.handleChange}\r\n                className={this.state.errors.userName ? 'error' : ''}\r\n              />\r\n              {this.state.errors.userName && <div className=\"errorMessage\">Required field</div>}\r\n          </div>\r\n          <div>\r\n            <p><strong>Password:</strong></p>\r\n              <input\r\n                name=\"password\"\r\n                type=\"text\"\r\n                value={this.state.password}\r\n                onChange={this.handleChange}\r\n                className={this.state.errorMessage === 'Password must be at least 8 characters long' && this.state.password.length < 8 ? 'error' : this.state.errors.password ? 'error' : this.state.password.length >= 8 ? '' : ''}\r\n              />\r\n              {this.state.password.length < 8 && this.state.password.length > 0 ? <div className=\"errorMessage\">{this.state.errorMessage}</div>\r\n                : this.state.password === '' && this.state.errors.password && <div className=\"errorMessage\">Required field</div>}\r\n          </div>\r\n          <div>\r\n            <p><strong>Repeat password:</strong></p>\r\n              <input\r\n                name=\"passwordTwo\"\r\n                type=\"text\"\r\n                value={this.state.passwordTwo}\r\n                onChange={this.handleChange}\r\n                className={this.state.errorMessage === 'Password must be at least 8 characters long' && this.state.passwordTwo.length < 8 ? 'error' : this.state.passwordTwo !== this.state.password && this.state.errorMessageTwo === 'Password must match' ? 'error' : this.state.passwordTwo !== this.state.password && this.state.errors.passwordTwo ? 'error' : this.state.passwordTwo === '' && this.state.errors.passwordTwo ? 'error' : ''}\r\n              />\r\n              {this.state.passwordTwo !== this.state.password ? <div className=\"errorMessage\">{this.state.errorMessageTwo}</div>\r\n                : this.state.passwordTwo.length < 8 && this.state.passwordTwo.length > 0 ? <div className=\"errorMessage\">{this.state.errorMessage}</div> : this.state.passwordTwo === '' && this.state.errors.passwordTwo && <div className=\"errorMessage\">Required field</div>}\r\n          </div>\r\n          <div>\r\n            <p><strong>Email:</strong></p>\r\n              <input\r\n                name=\"email\"\r\n                type=\"email\"\r\n                value={this.state.email}\r\n                onChange={this.handleChange}\r\n                className={this.state.errors.email ? 'error' : ''}\r\n              />\r\n              {this.state.errors.email && <div className=\"errorMessage\">Required field</div>}\r\n          </div>\r\n            <button>Sign up</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport Popup from 'react-popup';\nimport ReactForm from './ReactForm';\nimport './App.css';\nimport './Popup.css';\n\nconst App = () => (\n  <div className=\"App\">\n    <ReactForm />\n    <Popup />\n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}